AWSTemplateFormatVersion: 2010-09-09
Description: A Serverless & Loosely Coupled Short Video Transcoding & Delivery Project
Transform: AWS::Serverless-2016-10-31

Globals:
  # Lambda functions 
  Function:
    PermissionsBoundary: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary
    Environment:
      Variables:
        USER_POOL_ID: !Ref UserPool
        CLIENT_ID: !Ref UserPoolClient
        UPLOAD_SIZE_LIMIT: !Ref UploadSizeLimit
        UPLOAD_TIME_LIMIT: !Ref UploadTimeLimit
        TRANSPORTSTORAGE_BUCKET_NAME: !Ref TransportStorage
    LoggingConfig:
      ApplicationLogLevel: WARN
      LogFormat: JSON
      LogGroup: !Ref BackendFuncLogGroup
      SystemLogLevel: WARN
    Tags:
      Application: !Sub ${AppId}
      Environment: !Ref Environment
  # API Gateway
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    Cors:
      AllowOrigin: '''*'''
      AllowHeaders: '''Content-Type, Authorization, X-Access-Token'''
      AllowMethods: '''POST'''
      MaxAge: 5
    MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        LoggingLevel: ERROR
        DataTraceEnabled: true
    Auth:
      Authorizers:
        Cognito-Auth:
          UserPoolArn: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
          IdentitySource: $request.header.Authorization
          JwtConfiguration:
            Audience:
              - !Ref UserPoolClient
            Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
Parameters:
  AppId:
    Type: String
    Description: ShortRelay Project
  UploadSizeLimit:
    Type: Number
    Description: Upload Size Limit for content-length-range
  UploadTimeLimit:
    Type: Number
    Description: Upload Time Limit for preSignedPost
  TransportExpiryDays:
    Type: Number
    Description: File Expiry Days for Transport
  Environment:
    Type: String
    Description: Deployment Environment
    Default: Production
    AllowedValues:
      - Development
      - Staging
      - Production

Resources:
  # -----------------------------------------------------------------------------------------------------------------------
  # LOGGING & MONITORING
  # -----------------------------------------------------------------------------------------------------------------------
  # Common Logging Group for all lambda
  BackendFuncLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${AppId}-Backend-Func-Logs
      RetentionInDays: 7
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref AppId
  WorkerClusterLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/ecs/${AppId}-worker-cluster
      RetentionInDays: 7
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref AppId
  # -----------------------------------------------------------------------------------------------------------------------
  # AUTHENTICATION & AUTHORIZATION
  # -----------------------------------------------------------------------------------------------------------------------
  # User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppId}-userpool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      DeletionProtection: ACTIVE
      MfaConfiguration: 'OFF'
      UsernameConfiguration:
        CaseSensitive: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: email
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
  # User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AppId}-client
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 365
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  # -----------------------------------------------------------------------------------------------------------------------
  # API GATEWAY
  # -----------------------------------------------------------------------------------------------------------------------
  #AUTH APIs
  AuthAPIs:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: AuthAPIs
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /v1/auth/signup:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentityHandler.Arn}/invocations
              responses: {}
          /v1/auth/login:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentityHandler.Arn}/invocations
              responses: {}
          /v1/auth/logout:
            post:
              security:
                - Cognito-Auth: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentityHandler.Arn}/invocations
              responses: {}
          /v1/auth/forget-password:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentityHandler.Arn}/invocations
              responses: {}
          /v1/auth/forget-password/confirm:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentityHandler.Arn}/invocations
              responses: {}
          /v1/auth/session/refresh:
            post:
              security:
                - Cognito-Auth: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IdentityHandler.Arn}/invocations
              responses: {}
  # User Actions APIs
  UserActionsAPIs:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: UserActionsAPIs
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /v1/user/upload-request:
            post:
              security:
                - Cognito-Auth: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadHandler.Arn}/invocations
              responses: {}
  # -----------------------------------------------------------------------------------------------------------------------
  # LAMBDA
  # -----------------------------------------------------------------------------------------------------------------------
  # Auth Handler Lambda Function
  IdentityHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Authentication & Authorization
      CodeUri: ./dist/handlers
      Handler: identity-management-handler.identityHandler
      Runtime: nodejs18.x
      MemorySize: 2048
      Timeout: 120
      Tracing: Active
      Architectures:
        - arm64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonCognitoPowerUser
        - AWSXrayWriteOnlyAccess
      Events:
        AuthAPIsPOSTv1authsignup:
          Type: Api
          Properties:
            Path: /v1/auth/signup
            Method: POST
            RestApiId: !Ref AuthAPIs
        AuthAPIsPOSTv1authlogin:
          Type: Api
          Properties:
            Path: /v1/auth/login
            Method: POST
            RestApiId: !Ref AuthAPIs
        AuthAPIsPOSTv1authlogout:
          Type: Api
          Properties:
            Path: /v1/auth/logout
            Method: POST
            RestApiId: !Ref AuthAPIs
        AuthAPIsPOSTv1authforgetpassword:
          Type: Api
          Properties:
            Path: /v1/auth/forget-password
            Method: POST
            RestApiId: !Ref AuthAPIs
        AuthAPIsPOSTv1authforgetpasswordconfirm:
          Type: Api
          Properties:
            Path: /v1/auth/forget-password/confirm
            Method: POST
            RestApiId: !Ref AuthAPIs
        AuthAPIsPOSTv1authsessionrefresh:
          Type: Api
          Properties:
            Path: /v1/auth/session/refresh
            Method: POST
            RestApiId: !Ref AuthAPIs
      Environment:
        Variables:
          CLIENT_ID: !Ref UserPoolClient
  # Upload Handler Lambda Function
  UploadHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Upload Management
      CodeUri: ./dist/handlers
      Handler: upload-handler.uploadHandler
      Runtime: nodejs18.x
      MemorySize: 1024
      Timeout: 60
      Tracing: Active
      Architectures:
        - arm64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${TransportStorage}
                - !Sub arn:${AWS::Partition}:s3:::${TransportStorage}/*
      Events:
        UserActionsAPIsPOSTv1useruploadrequest:
          Type: Api
          Properties:
            Path: /v1/user/upload-request
            Method: POST
            RestApiId: !Ref UserActionsAPIs
      Environment:
        Variables:
          TRANSPORTSTORAGE_BUCKET_NAME: !Ref TransportStorage
          TRANSPORTSTORAGE_BUCKET_ARN: !GetAtt TransportStorage.Arn
  EventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Manages s3 Event notifications
      CodeUri: ./dist/handlers
      Handler: event-handler.eventHandler
      Runtime: nodejs18.x
      MemorySize: 2024
      Timeout: 120
      Tracing: Active
      Architectures:
        - arm64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref MetadataStorage
        - SQSSendMessagePolicy:
            QueueName: !GetAtt TaskQueue.QueueName
      Events:
        UploadEventQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UploadEventQueue.Arn
            BatchSize: 5
            MaximumBatchingWindowInSeconds: 15
      Environment:
        Variables:
          METADATASTORAGE_TABLE_NAME: !Ref MetadataStorage
          METADATASTORAGE_TABLE_ARN: !GetAtt MetadataStorage.Arn
          TASKQUEUE_QUEUE_NAME: !GetAtt TaskQueue.QueueName
          TASKQUEUE_QUEUE_ARN: !GetAtt TaskQueue.Arn
          TASKQUEUE_QUEUE_URL: !Ref TaskQueue
  TaskHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Task Manager
      CodeUri: ./dist/handlers
      Handler: task-handler.taskHandler
      Runtime: nodejs18.x
      MemorySize: 1024
      Timeout: 60
      Tracing: Active
      Architectures:
        - arm64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref MetadataStorage
      Events:
        TaskQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt TaskQueue.Arn
            BatchSize: 1
      Environment:
        Variables:
          METADATASTORAGE_TABLE_NAME: !Ref MetadataStorage
          METADATASTORAGE_TABLE_ARN: !GetAtt MetadataStorage.Arn
  CompletionHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Completion Handler
      CodeUri: ./dist/handlers
      Handler: completion-handler.completionHandler
      Runtime: nodejs18.x
      MemorySize: 2048
      Timeout: 120
      Tracing: Active
      Architectures:
        - arm64
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref MetadataStorage
      Events:
        CompletionQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt CompletionQueue.Arn
            BatchSize: 5
            MaximumBatchingWindowInSeconds: 5
      Environment:
        Variables:
          METADATASTORAGE_TABLE_NAME: !Ref MetadataStorage
          METADATASTORAGE_TABLE_ARN: !GetAtt MetadataStorage.Arn
  # -----------------------------------------------------------------------------------------------------------------------
  # STORAGE
  # -----------------------------------------------------------------------------------------------------------------------
  #S3 Bucket Used For Uploads & Its Policy
  TransportStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-transport-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: !Ref TransportExpiryDays
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:Post
            Queue: !GetAtt UploadEventQueue.Arn
    DependsOn:
      - TransportStorageToUploadEventQueuePermission
  TransportStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TransportStorage
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt TransportStorage.Arn
              - !Sub ${TransportStorage.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  ContentStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-content-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:Post
            Queue: !GetAtt CompletionQueue.Arn
    DependsOn:
      - ContentStorageToCompletionQueuePermission
  ContentStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ContentStorage
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt ContentStorage.Arn
              - !Sub ${ContentStorage.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  # Metadata storage
  MetadataStorage:
    Type: AWS::DynamoDB::Table
    Properties:
      DeletionProtectionEnabled: true
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: assetId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: assetId
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref AppId
  # -----------------------------------------------------------------------------------------------------------------------
  # QUEUE
  # -----------------------------------------------------------------------------------------------------------------------
  UploadEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AppId}-UploadEventQueue
      MessageRetentionPeriod: 345600
      VisibilityTimeout: 120
      DelaySeconds: 15
  TransportStorageToUploadEventQueuePermission:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt UploadEventQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::${AWS::StackName}-transport-${AWS::AccountId}
      Queues:
        - !Ref UploadEventQueue
  CompletionQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AppId}-CompletionQueue
      MessageRetentionPeriod: 345600
      VisibilityTimeout: 120
      DelaySeconds: 15
  ContentStorageToCompletionQueuePermission:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt CompletionQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub arn:${AWS::Partition}:s3:::${AWS::StackName}-content-${AWS::AccountId}
      Queues:
        - !Ref CompletionQueue
  TaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AppId}-TaskQueue
      MessageRetentionPeriod: 345600
      VisibilityTimeout: 60
      DelaySeconds: 5
  # -----------------------------------------------------------------------------------------------------------------------
  # NETWORK
  # -----------------------------------------------------------------------------------------------------------------------
  # VPC
  WorkerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref AppId
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref AppId

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WorkerVPC
      InternetGatewayId: !Ref InternetGateway
  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: WorkerVPC
    Properties:
      VpcId: !Ref WorkerVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref AppId
  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WorkerVPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref AppId

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group
  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Fargate workers
      VpcId: !Ref WorkerVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref AppId
  # VPC Endpoints
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref WorkerVPC
      RouteTableIds:
        - !Ref PublicRouteTable
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${TransportStorage}/*
              - !Sub arn:aws:s3:::${ContentStorage}/*
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref AppId
  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref WorkerVPC
      RouteTableIds:
        - !Ref PublicRouteTable
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref AppId
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Processing Pipeline
      Members:
        - TransportStorage
        - ContentStorage
        - CompletionQueue
        - UploadEventQueue
        - EventHandler
        - CompletionHandler
        - TaskQueue
        - TaskHandler
        - MetadataStorage
    Group2:
      Label: Authentication & Authorization
      Members:
        - UserPoolClient
        - UserPool